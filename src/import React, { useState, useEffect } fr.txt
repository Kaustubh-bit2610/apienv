import React, { useState, useEffect } from 'react';
import { ApiPostMethodWithToken } from './helper';

const App = () => {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [inputValue, setInputValue] = useState('');
  const [completed, setCompleted] = useState(false);
  const [editMode, setEditMode] = useState(false);
  const [editEntry, setEditEntry] = useState(null);
  const [editInputValue, setEditInputValue] = useState('');
  const [editCompleted, setEditCompleted] = useState(false);
  const [editId, setEditId] = useState(null);
  const [token, setToken] = useState('');

  useEffect(() => {
    fetchData();
  }, []);

  useEffect(() => {
    const token = localStorage.getItem('token');
    if (token) {
      setToken(token);
    }
  }, []);
  const url = 'http://localhost:3005/api/todos/';
  const fetchData = async () => {
    try {
      setLoading(true);
      const response = await ApiPostMethodWithToken(`${url}viewall`, {}, token, 'GET');
      setData(response);
    } catch (error) {
      setError(error);
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (event) => {
    setInputValue(event.target.value);
  };

  const handleCompletedChange = (event) => {
    setCompleted(event.target.value === 'true');
  };

  const handleSubmit = async () => {
    if (inputValue.trim() !== '') {
      try {
        await ApiPostMethodWithToken(`${url}add`, { title: inputValue, completed: completed }, token);
        fetchData();
        setInputValue('');
        setCompleted(false);
      } catch (error) {
        setError(error);
      }
    }
  };

  const handleEdit = (entry) => {
    setEditMode(true);
    setEditEntry(entry);
    setEditInputValue(entry.title);
    setEditCompleted(entry.completed);
    setEditId(entry._id);
  };

  const handleEditInputChange = (event) => {
    setEditInputValue(event.target.value);
  };

  const handleEditCompletedChange = (event) => {
    setEditCompleted(event.target.value === 'true');
  };

  const handleEditSubmit = async () => {
    try {
      await ApiPostMethodWithToken(`${url}update/${editId}`, { title: editInputValue, completed: editCompleted }, token);
      fetchData();
      setEditMode(false);
      setEditEntry(null);
      setEditInputValue('');
      setEditCompleted(false);
    } catch (error) {
      setError(error);
    }
  };

  const handleCancelEdit = () => {
    setEditMode(false);
    setEditEntry(null);
    setEditInputValue('');
    setEditCompleted(false);
  };

  const handleDelete = async (id) => {
    try {
      await ApiPostMethodWithToken(`${url}delete/${id}`, {}, token);
      fetchData();
    } catch (error) {
      setError(error);
    }
  };

  if (loading) {
    return <div>Loading...</div>;
  }

  if (error) {
    return <div>Error: {error.message}</div>;
  }

  return (
    <div>
      <h1>Data Table</h1>
      <div>
        <input
          type="text"
          value={editMode ? editInputValue : inputValue}
          onChange={editMode ? handleEditInputChange : handleInputChange}
          placeholder="Enter value"
        />
        <label>
          <input
            type="radio"
            value="true"
            checked={editMode ? editCompleted : completed}
            onChange={editMode ? handleEditCompletedChange : handleCompletedChange}
          /> Yes
        </label>
        <label>
          <input
            type="radio"
            value="false"
            checked={editMode ? !editCompleted : !completed}
            onChange={editMode ? handleEditCompletedChange : handleCompletedChange}
          /> No
        </label>
        <button onClick={editMode ? handleEditSubmit : handleSubmit}>
          {editMode ? 'Save' : 'Submit'}
        </button>
        {editMode && <button onClick={handleCancelEdit}>Cancel</button>}
      </div>
      <table>
        <thead>
          <tr>
            <th>Title</th>
            <th>Completed</th>
            <th>Action</th>
          </tr>
        </thead>
        <tbody>
          {data.map(entry => (
            <tr key={entry._id}>
              <td>{entry.title}</td>
              <td>{entry.completed ? 'Yes' : 'No'}</td>
              <td>
                <button onClick={() => handleEdit(entry)}>Edit</button>
                <button onClick={() => handleDelete(entry._id)}>Delete</button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default App;
